/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.mate1.avro.example.records;  
@SuppressWarnings("all")
/** Logs for mildly important stuff. */
@org.apache.avro.specific.AvroGenerated
public class DummyLog2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DummyLog2\",\"namespace\":\"com.mate1.avro.example.records\",\"doc\":\"Logs for mildly important stuff.\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"logTime\",\"type\":\"long\"},{\"name\":\"muchoStuff2\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long id;
  @Deprecated public long logTime;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> muchoStuff2;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public DummyLog2() {}

  /**
   * All-args constructor.
   */
  public DummyLog2(java.lang.Long id, java.lang.Long logTime, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> muchoStuff2) {
    this.id = id;
    this.logTime = logTime;
    this.muchoStuff2 = muchoStuff2;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return logTime;
    case 2: return muchoStuff2;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: logTime = (java.lang.Long)value$; break;
    case 2: muchoStuff2 = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'logTime' field.
   */
  public java.lang.Long getLogTime() {
    return logTime;
  }

  /**
   * Sets the value of the 'logTime' field.
   * @param value the value to set.
   */
  public void setLogTime(java.lang.Long value) {
    this.logTime = value;
  }

  /**
   * Gets the value of the 'muchoStuff2' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMuchoStuff2() {
    return muchoStuff2;
  }

  /**
   * Sets the value of the 'muchoStuff2' field.
   * @param value the value to set.
   */
  public void setMuchoStuff2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.muchoStuff2 = value;
  }

  /** Creates a new DummyLog2 RecordBuilder */
  public static com.mate1.avro.example.records.DummyLog2.Builder newBuilder() {
    return new com.mate1.avro.example.records.DummyLog2.Builder();
  }
  
  /** Creates a new DummyLog2 RecordBuilder by copying an existing Builder */
  public static com.mate1.avro.example.records.DummyLog2.Builder newBuilder(com.mate1.avro.example.records.DummyLog2.Builder other) {
    return new com.mate1.avro.example.records.DummyLog2.Builder(other);
  }
  
  /** Creates a new DummyLog2 RecordBuilder by copying an existing DummyLog2 instance */
  public static com.mate1.avro.example.records.DummyLog2.Builder newBuilder(com.mate1.avro.example.records.DummyLog2 other) {
    return new com.mate1.avro.example.records.DummyLog2.Builder(other);
  }
  
  /**
   * RecordBuilder for DummyLog2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DummyLog2>
    implements org.apache.avro.data.RecordBuilder<DummyLog2> {

    private long id;
    private long logTime;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> muchoStuff2;

    /** Creates a new Builder */
    private Builder() {
      super(com.mate1.avro.example.records.DummyLog2.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.mate1.avro.example.records.DummyLog2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logTime)) {
        this.logTime = data().deepCopy(fields()[1].schema(), other.logTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.muchoStuff2)) {
        this.muchoStuff2 = data().deepCopy(fields()[2].schema(), other.muchoStuff2);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DummyLog2 instance */
    private Builder(com.mate1.avro.example.records.DummyLog2 other) {
            super(com.mate1.avro.example.records.DummyLog2.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.logTime)) {
        this.logTime = data().deepCopy(fields()[1].schema(), other.logTime);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.muchoStuff2)) {
        this.muchoStuff2 = data().deepCopy(fields()[2].schema(), other.muchoStuff2);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.Long getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.mate1.avro.example.records.DummyLog2.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.mate1.avro.example.records.DummyLog2.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'logTime' field */
    public java.lang.Long getLogTime() {
      return logTime;
    }
    
    /** Sets the value of the 'logTime' field */
    public com.mate1.avro.example.records.DummyLog2.Builder setLogTime(long value) {
      validate(fields()[1], value);
      this.logTime = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'logTime' field has been set */
    public boolean hasLogTime() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'logTime' field */
    public com.mate1.avro.example.records.DummyLog2.Builder clearLogTime() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'muchoStuff2' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMuchoStuff2() {
      return muchoStuff2;
    }
    
    /** Sets the value of the 'muchoStuff2' field */
    public com.mate1.avro.example.records.DummyLog2.Builder setMuchoStuff2(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[2], value);
      this.muchoStuff2 = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'muchoStuff2' field has been set */
    public boolean hasMuchoStuff2() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'muchoStuff2' field */
    public com.mate1.avro.example.records.DummyLog2.Builder clearMuchoStuff2() {
      muchoStuff2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DummyLog2 build() {
      try {
        DummyLog2 record = new DummyLog2();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.logTime = fieldSetFlags()[1] ? this.logTime : (java.lang.Long) defaultValue(fields()[1]);
        record.muchoStuff2 = fieldSetFlags()[2] ? this.muchoStuff2 : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
